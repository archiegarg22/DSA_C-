/*************************************************************
    Following is the Binary Tree node structure

    template <typename T>
    class BinaryTreeNode
    {
    public:
        T data;
        BinaryTreeNode<T> *left, *right;
        BinaryTreeNode() : data(0), left(NULL), right(NULL) {}
        BinaryTreeNode(T x) : data(x), left(NULL), right(NULL) {}
        BinaryTreeNode(T x, BinaryTreeNode<T> *left, BinaryTreeNode<T> *right) : data(x), left(left), right(right) {}
    };

*************************************************************/
/*

    Time Complexity : O(N)
    Space Complexity : O(N)

    where N is the number of nodes in the BST.

*/

BinaryTreeNode<int>* deleteNode(BinaryTreeNode<int>* root, int key) {
    if (root == NULL) {
        return NULL;
    }

    if (key < root -> data) {
        root -> left = deleteNode(root -> left, key);
    }

    else if (key > root -> data) {
        root -> right = deleteNode(root -> right, key);
    }

    else {

        // Leaf node.
        if (root -> left == NULL && root -> right == NULL) {
            return NULL;
        }

        if (root -> left == NULL) {
            // Node doesn't have a left subtree.
            return root -> right;
        }

        if (root -> right == NULL) {
            // Node doesn't have a right subtree.
            return root -> left;
        }


        // Find the minimum value in the right Subtree(successor).
        BinaryTreeNode<int>* rightSubtree = root -> right;

        while (rightSubtree -> left != NULL) {
            rightSubtree = rightSubtree -> left;
        }

        root -> data = rightSubtree -> data;

        // Delete the inorder successor.
        root -> right = deleteNode(root -> right, rightSubtree -> data);
    }

    return root;
}
/*BinaryTreeNode<int> *lastnode(BinaryTreeNode<int> * root){
    if( root->right == NULL){
        return NULL;
    }
    return lastnode(root->right);

}
BinaryTreeNode<int>* helper( BinaryTreeNode<int> *root){
    if( root-> left == NULL){
        return root-> right;
    }
    else if( root-> right == NULL){
        return root -> right;
    }
     BinaryTreeNode<int> *rightchild = root-> right;
     BinaryTreeNode<int> *lastrightnode = lastnode(root->left);
     lastrightnode->right = rightchild;
     return root-> left;


}
BinaryTreeNode<int>* deleteNode(BinaryTreeNode<int>* root, int key) {
    // Write your code here.
    if( root == NULL){
        return root;
    }
    if( root-> data == key){
        return helper(root);
    }
    //root will be lost so store it and then return dummy only
    BinaryTreeNode<int> * dummy = root;

    if( key < root-> data){
        if( root -> left != NULL && root-> left-> data == key){
            return helper(root-> left);
        }
        else{
            root = root-> left;
        }
    }
    else{
        if( root -> right != NULL && root-> right -> data == key){
            return helper(root-> right);
        }
        else{
            root = root-> right;
        }
        
    }
    return dummy;


}*/























